//local
#include "PPSDetectorConstruction.hh"
#include "PPSDetectorMessenger.hh"
#include "PPSOutput.hh"

// geant4
#include "G4Material.hh"
#include "G4Element.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4Sphere.hh"
#include "G4Cons.hh"
#include "G4LogicalVolume.hh"
#include "G4PVPlacement.hh"
#include "G4SDManager.hh"
#include "G4FieldManager.hh"
#include "G4PVReplica.hh"
#include "G4RunManager.hh"
#include "G4TransportationManager.hh"
#include "G4PropagatorInField.hh"
#include "G4UniformMagField.hh"
#include "G4Mag_UsualEqRhs.hh"
#include "G4ChordFinder.hh"
#include "G4GeometryManager.hh"
#include "G4PhysicalVolumeStore.hh"
#include "G4LogicalVolumeStore.hh"
#include "G4SolidStore.hh"
#include "G4UnionSolid.hh"
#include "G4SubtractionSolid.hh"
#include "G4UnitsTable.hh"
#include "G4PolarizationManager.hh"
#include "G4NistManager.hh"
#include "G4VisAttributes.hh"
#include "G4Colour.hh"


extern PPSOutput rootOutput;
G4double RSphere = 1.1*mm;
G4double samplerLength      = 2.E-11 * m;
G4double beampipe_thickness = 1. * mm;

PPSDetectorConstruction::PPSDetectorConstruction():
	pWorld(0), 
	pSampler0(0),pSampler1(0),
	pTarget(0), TargetMaterial(0),
	slices_r(1),slices_z(1),n1(10),n2(9) {
  //Initial parameters 
  worldSize         = 10.*m;
  targetRadius      = 1.*cm; 
  targetThickness   = 1.*cm; 
  
  
  SetTargetMaterial("G4_W"); 
  SetBinPedd(1);
  DefineMaterials();
  
  detectorMessenger = new PPSDetectorMessenger(this);
  rootOutput.nb_slices[0] = slices_r;
  rootOutput.nb_slices[1] = slices_z;
  
  dividedBoxPhys.resize(n1+n2);
  
}

PPSDetectorConstruction::~PPSDetectorConstruction() { }

void PPSDetectorConstruction::DefineMaterials()
{
  //    	Vacuum      =   G4NistManager::Instance()->FindOrBuildMaterial("G4_Galactic");
  
  // Vacuum from example novice No3
  G4double a, z, density,fractionmass;
  Vacuum = new G4Material("Galactic",z=1.,a=1.01*g/mole,density=universe_mean_density,kStateGas,2.73*kelvin,3.e-18*pascal);
  Tungsten    =   G4NistManager::Instance()->FindOrBuildMaterial("G4_W");
  Cupper    =   G4NistManager::Instance()->FindOrBuildMaterial("G4_Cu");

  /// add G4_WRe see geant4 exemple xray_fluorescence
  std::vector<G4double> vec_fractionMass;
  std::vector<G4String> vec_elements;  
  density = 19.7524 * g/cm3; // W-25Re 
  vec_elements.push_back("W");  vec_fractionMass.push_back(0.75); 
  vec_elements.push_back("Re");  vec_fractionMass.push_back(0.25);
  W75Re25 = G4NistManager::Instance()->ConstructNewMaterial("G4_WRe",vec_elements, vec_fractionMass, density);
  vec_elements.clear();
  vec_fractionMass.clear();

}

G4VPhysicalVolume* PPSDetectorConstruction::Construct()
{	
  
  // Cleanup old geometry
  G4GeometryManager::GetInstance()->OpenGeometry();
  G4PhysicalVolumeStore::GetInstance()->Clean();
  G4LogicalVolumeStore::GetInstance()->Clean();
  G4SolidStore::GetInstance()->Clean();
  G4PolarizationManager::GetInstance()->Clean();
  
  // World
  G4Box* sWorld = new G4Box("World",worldSize/2,worldSize/2,worldSize/2);
  G4LogicalVolume* lWorld = new G4LogicalVolume(sWorld,Vacuum,"World");
  pWorld = new G4PVPlacement(0, G4ThreeVector(),lWorld,"World",0,false,0);	
  // Vacuum from example novice No3
  rootOutput.Mat = TargetMaterial->GetName();
  
  //
  // Sampler0
  //
  G4SDManager* SDman = G4SDManager::GetSDMpointer();
  SamplerSensDet = new PPSSamplerSD("PPSSamplerSD");
  SDman->AddNewDetector(SamplerSensDet);
  
  G4double rmin_sampler = 0.;
  G4double rmax_sampler = RSphere ;
  
  rmax_sampler = GetTargetRadius();
  
  G4VisAttributes* LogVisAttSampler= new G4VisAttributes(G4Colour(1.0,1.0,0.));
  G4ThreeVector positionSampler0= G4ThreeVector(0,0,samplerLength/2);
  G4Tubs *solidSampler0 = new G4Tubs("Sampler0",rmin_sampler,rmax_sampler,samplerLength/2.,0,twopi*radian);
  G4LogicalVolume* logicSampler0 = new G4LogicalVolume(solidSampler0,Vacuum,"Sampler0");
  pSampler0 = new G4PVPlacement(0,positionSampler0,logicSampler0,"Sampler0",lWorld,false,0);
  logicSampler0 ->SetVisAttributes(LogVisAttSampler);
  logicSampler0->SetSensitiveDetector(SamplerSensDet);
  
  //
  // Target 
  //
  G4double current_position = samplerLength;
	
  G4ThreeVector positionTarget= G4ThreeVector(0,0,current_position+targetThickness/2);
  G4Tubs *solidTarget = new G4Tubs("Target",0.,targetRadius,targetThickness/2.,0,twopi*radian);
  
  G4LogicalVolume* logicTarget = new G4LogicalVolume(solidTarget, TargetMaterial,"Target");
  pTarget = new G4PVPlacement(0,positionTarget,logicTarget,"Target",lWorld,false,0);
  G4VisAttributes * LogVisAttTarget       = new G4VisAttributes ( G4Colour(204/255. ,204/255. ,255/255. )); //metal
  LogVisAttTarget->SetForceSolid(true);
  logicTarget ->SetVisAttributes(LogVisAttTarget);
  // register logical Volume in PolarizationManager with zero polarization
  G4PolarizationManager * polMgr = G4PolarizationManager::GetInstance();
  polMgr->SetVolumePolarization(logicTarget,G4ThreeVector(0.,0.,0.));
  //Target Calo
  TargetCaloSD= new PPSTargetCaloSD("PPSTargetCaloSD");//,this);
  SDman->AddNewDetector(TargetCaloSD);
  logicTarget->SetSensitiveDetector(TargetCaloSD);
  current_position +=targetThickness;
  
  //
  // Sampler 1
  //
  
  G4ThreeVector positionSampler1=G4ThreeVector(0.,0.,current_position+samplerLength/2);
  G4LogicalVolume* logicSampler1 = new G4LogicalVolume(solidSampler0,Vacuum,"Sampler1");
  pSampler1 = new G4PVPlacement(0,positionSampler1,logicSampler0,"Sampler1",lWorld,false,0);
  logicSampler1 ->SetVisAttributes(LogVisAttSampler);
  logicSampler1->SetSensitiveDetector(SamplerSensDet);
  ////////////	
  
  current_position += samplerLength;
  fLength=current_position;
  rootOutput.TotalLength=fLength/meter;
  PrintParameters();
  //always return the root volume	
  
  return pWorld;
}

void PPSDetectorConstruction::PrintParameters()
{
	G4cout << "###############################################################" << G4endl;
	G4cout << " The Target radius"           << G4BestUnit(targetRadius,"Length")  << G4endl;
	G4cout << " Thickness "                       << G4BestUnit(targetThickness,"Length")   << G4endl;
	G4cout << " of "                      << TargetMaterial->GetName()          << G4endl;
	G4cout << " Nb of layers in R " << slices_r << G4endl;
	G4cout << " and in Z "                << slices_z                           << G4endl;
	G4cout<< "################################################################" << G4endl;
}

void PPSDetectorConstruction::SetTargetMaterial(G4String materialChoice)
{
	// search the material by its name
	G4Material* mat = G4NistManager::Instance()->FindOrBuildMaterial(materialChoice);
	if (mat != TargetMaterial) {
		if(mat) 
		{
			TargetMaterial = mat;
			UpdateGeometry();
		} 
		else 
		{
			G4cout << "### Warning!  Target material: <"<< materialChoice << "> not found" << G4endl;  
			G4cout << " Exit NOW ..." << G4endl;	  
			exit(1);
		}     
	}
}

void PPSDetectorConstruction::SetTargetRadius(G4double value)
{
	targetRadius = value; 
	UpdateGeometry();
}

void PPSDetectorConstruction::SetTargetThickness(G4double value)
{
	targetThickness = value; 
	UpdateGeometry();
}

void PPSDetectorConstruction::SetCellR(G4int value)
{
	slices_r=value;
	rootOutput.nb_slices[0] = slices_r;
	rootOutput.UpdateHistoLimit();
}

void PPSDetectorConstruction::SetCellZ(G4int value)
{
	slices_z=value;
	rootOutput.nb_slices[1] =slices_z;
	rootOutput.UpdateHistoLimit();
}

void PPSDetectorConstruction::SetBinPedd(G4int value)
{
	slices_pedd=value;
	rootOutput.nb_slices_pedd= slices_pedd;
	rootOutput.UpdateHistoLimit();
}

void PPSDetectorConstruction::UpdateGeometry()
{
	if (pWorld) G4RunManager::GetRunManager()->DefineWorldVolume(Construct());
	rootOutput.dim_target[0] = GetTargetRadius();
	rootOutput.dim_target[1] = GetTargetThickness();
}	
