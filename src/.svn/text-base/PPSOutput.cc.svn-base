#include "PPSOutput.hh"
#include "G4RunManager.hh"
#include "G4ParticleGun.hh"
#include <time.h>

extern G4double sum_initial_E;

PPSOutput::PPSOutput():HitSampler0(0)
{
	time_t t ;//= time(NULL);
	time(&t); /* t contain now the current date and time */
    
	strftime(buffer_datetime, sizeof(buffer_datetime), "%A %d %B %Y - %X.", localtime(&t));
	printf("---------->>>>>> %s\n", buffer_datetime);
}

PPSOutput::~PPSOutput()
{
	if(rootFile->IsOpen())
	{
		if(sTree )rootFile->Write();
		rootFile->Close();
		G4cout << "Root File close proprely (from PPSOutput destructor) " << G4endl;
		delete rootFile;
	}
    
	if(HitSampler0!=NbEvents) 
	{
		G4cerr << "\n!!!! Not all the particles impinge the Sampler0 \n Please check \n";
		G4cerr << " Did you shooted particle with z > 0 ?\n" << G4endl;    
	}  
}	

void PPSOutput::WriteAndClose()
{
	if(rootFile->IsOpen())
	{
		G4cout << " Root File Open 1" << G4endl;
		rootFile->Write();
		Header();
		rootFile->WriteObject(&header, the_text_header); 
		rootFile->Close();
		G4cout << " Root File close properly from WriteAndClose PPSOutput method" << G4endl;
	}
}

void PPSOutput::Init()
{
	rootFile = new TFile ("ppsim.root","RECREATE","PPSim output file");
	TObjString header("MyHeader");
    
	G4String name;
	for(G4int i=0;i<2;i++)
    {
		if(i==0) name="Sampler0";
		if(i==1) name="Sampler1";
        
		SamplerTree = new TTree(name,"Sampler output");
		SamplerTree->Branch("pdg",&pdg,"pdg/I");
		SamplerTree->Branch("x",&x,"x/D");
		SamplerTree->Branch("y",&y,"y/D");
		SamplerTree->Branch("px",&px,"px/D");
		SamplerTree->Branch("py",&py,"py/D");
		SamplerTree->Branch("pz",&pz,"pz/D");		
		SamplerTree->Branch("E",&E,"E/D");
		SamplerTree->Branch("tID",&track_id,"tID/I");
        
		if(StorePolarisation==true)
		{
			SamplerTree->Branch("sx",&sx,"sx/D");
			SamplerTree->Branch("sy",&sy,"sy/D");
			SamplerTree->Branch("sz",&sz,"sz/D");			
		}
		if(i!=0)
		{
			SamplerTree->Branch("z",&z,"z/D");
			SamplerTree->Branch("z0",&z0,"z0/D");
			SamplerTree->Branch("E0",&E0,"E0/D");
			SamplerTree->Branch("r0",&r0,"r0/D");
			SamplerTree->Branch("t",&t,"t/D");
		}
	}	
    
    G4double thickness = dim_target[1]/mm;
    G4double radius = dim_target[0]/mm;
    G4int nBins =  nb_slices[0];//nb_slices_pedd;
    char name_histo[256];
    
    histo_r.resize(nb_slices[1]);
    vectorEnergy.resize(nb_slices[1]);
    for(int i=0;i<nb_slices[1];i++)
    {
     //   edep_per_event_xz[i].resize(nb_slices_pedd);
        vectorEnergy[i].resize(nBins);
        sprintf(name_histo,"histo_r_%d",i);
        histo_r[i+1] = new TH1F(name_histo,"histo over r;E(MeV)",nBins,0.,radius);
    }
    
    nBins = G4int(thickness);
 
    EnergyLossHisto_long = new TH1F("ElossHisto_long", "Energy Loss histo longitudinal",nBins,0.,thickness);
    
    nBins = G4int(radius);
    EnergyLossHisto_trans = new TH1F("ElossHisto_trans", "Energy Loss histo transverse",nBins,0.,radius);
    
    
    EnergyDepoSpheres.clear();
    EnergyDepoSpheres.resize(6);
    
        for(int i=0;i<6;i++)
        {
                EnergyDepoSpheres[i].resize(10);
               for(int j=0;j<10;j++)
                EnergyDepoSpheres[i][j].resize(10);
        }   
    
    G4cout << "###### Message (1) from PPSOutput ######" <<G4endl;
    G4cout << "## Thickness = " << thickness << " mm,  Radius = " << dim_target[0]/mm << " mm ##" << G4endl;
    G4cout << "## Nb slices radius = " << nb_slices[0] << " , nb slices z = " << nb_slices[1] <<  " ##" << G4endl;
    G4cout << "## Nb of events = " << NbEvents << " ##" << G4endl;
    G4cout << "###### end msg (1) from PPSOutput ######" <<G4endl; 	
}

void PPSOutput::UpdateHistoLimit()
{
    
	G4double thickness = dim_target[1]/mm;
    G4double radius = dim_target[0]/mm;
    G4int nBins = nb_slices[0];//nb_slices_pedd;

    
    vectorEnergy.clear();
    histo_r.clear();
    
    histo_r.resize(nb_slices[1]);
    vectorEnergy.resize(nb_slices[1]);
    char name_histo[256];
    
    for(int i=0;i<nb_slices[1];i++)
    {
    vectorEnergy[i].resize(nBins);//nb_slices_pedd);
    sprintf(name_histo,"histo_r_%d",i);
    histo_r[i] = new TH1F(name_histo,"histo over r;E(MeV)",nBins,0.,radius);
    }
        
    delete EnergyLossHisto_long;
	delete EnergyLossHisto_trans;
	
    nBins = G4int(thickness);
	EnergyLossHisto_long = new TH1F("ElossHisto_long", "Energy Loss histo longitudinal",nBins,0.,thickness);
	
	nBins = G4int(radius);
	EnergyLossHisto_trans = new TH1F("ElossHisto_trans", "Energy Loss histo transverse",nBins,0.,radius);
    

    EnergyDepoSpheres.clear();
    EnergyDepoSpheres.resize(6);

        for(int i=0;i<6;i++)
        {
                EnergyDepoSpheres[i].resize(10);
               for(int j=0;j<10;j++)
                EnergyDepoSpheres[i][j].resize(10);
        }

    
    
	G4cout << "###### Message (2) from PPSOutput (histo limits updated method) ######"<<G4endl;
	G4cout << "## Thickness = " << thickness << " mm, Radius = " << dim_target[0]/mm << " mm ##" << G4endl;
	G4cout << "## Nb slices radius = " << nb_slices[0] << " , nb slices z = " << nb_slices[1]<< " ##" << G4endl;
	G4cout << "## Nb of events = " << NbEvents << " ##" << G4endl;
    G4cout << "##### end msg (2) from PPSOutput " <<G4endl;
}
void PPSOutput::UpdateHistoLimitPEDD(G4int n,G4double MAX)
{
	char name_histo_x[256];
   
    sprintf(name_histo_x,"histo_x_%d",n);
    histo_x[n]->Delete();
	histo_x[n] = new TH1F(name_histo_x,"histo over x;E(MeV)",100,0.,MAX);///-radius,radius);

}

void PPSOutput::WriteDataSampler(PPSSamplerHitsCollection *hc)
{
	G4cout.precision(6);
	for (G4int i=0; i<hc->entries(); i++)
	{
		sTree=(TTree*)gDirectory->Get((*hc)[i]->GetName());
		if(!sTree) G4Exception("PPSOutput: ROOT Sampler not found!","sTree pb",FatalException,"don't find tree in the rootfile:(");
        
		pdg=(*hc)[i]->GetPDG();
		x=(*hc)[i]->GetX()/cm;
		y=(*hc)[i]->GetY()/cm;
		z=(*hc)[i]->GetZ()/cm;
		px=(*hc)[i]->GetPX();
		py=(*hc)[i]->GetPY();
		pz=(*hc)[i]->GetPZ();
		E=(*hc)[i]->GetEnergy() / MeV ;
		sx=(*hc)[i]->GetSx();
		sy=(*hc)[i]->GetSy();
		sz=(*hc)[i]->GetSz();
		z0=(*hc)[i]->GetZ0() / cm ;
		E0=(*hc)[i]->GetEnergy0() / MeV;
		r0=(*hc)[i]->GetR0() / cm ;
		t=(*hc)[i]->GetTime() / nanosecond ;
		track_id=(*hc)[i]->GetTrackID();
        
		if((*hc)[i]->GetName()=="Sampler0") 
		{
			if(pz>0.&&track_id==1&&E0==E) HitSampler0++;
			sTree->Fill();
		}
		else
		{
			if(cluster_bool==1 && pdg==-11) sTree->Fill(); 
			if(cluster_bool==1 && StoreNoneEMParticles==true && pdg!=22 && pdg!=-11 && pdg!=11) sTree->Fill();	
			if(cluster_bool==0)  sTree->Fill();
		}
	}
}

void PPSOutput::WriteDataTarget(PPSTargetCaloHitsCollection *thc)
{
	for (G4int i=0; i<thc->entries(); i++)
	{
		G4double EWeight=(*thc)[i]->GetEnergyWeightedPosition()/(*thc)[i]->GetDEPdE();
		EnergyLossHisto_long->Fill(EWeight/mm,(*thc)[i]->GetDEPdE() / MeV);
		
		EWeight=(*thc)[i]->GetEnergyWeightedPositionR()/(*thc)[i]->GetDEPdE();
		EnergyLossHisto_trans->Fill(EWeight/mm,(*thc)[i]->GetDEPdE() / MeV);
	}
}

void PPSOutput::Header()
{
	sprintf(Matos,"%s",Mat.c_str());
	sprintf(the_text_header,
			"\n#############%s####################\
			\n# Particles Types : %d    \
			\n# Number of particles which impinged the target   :   %d  \
			\n# (%d incident was shooted) \
			\n# Particles was shooted at Z0   =   %f m    \
			\n# Particles Mean Energy   :   %f  MeV \
			\n# Material    :   %s  size(radius,thickness)=(%f,%f)  mm  \
			\n# Number of slices(n_radius,n_z)=(%d,%d)   \
            \n# Number slice for pedd calculation = %d\
			\n# RMS r:%f mm                                   \
			\n# (Total length: target %f m)\
			\n####################################################\n",
			buffer_datetime,
			ParticleID,HitSampler0,NbEvents,startZ,(sum_initial_E/MeV)/(double)NbEvents,Matos,
			dim_target[0]/mm,dim_target[1]/mm,
			nb_slices[0],nb_slices[1],nb_slices_pedd,rms,
			TotalLength);
}

void PPSOutput::initializePerEvent()
{
    G4cout << " Start init vectors " << G4endl;

    G4int Nr = nb_slices[0];
    G4int Nz = nb_slices[1];
    G4int Nx = nb_slices_pedd;
    for(int i=0;i<Nr;i++)
        for(int j=0;j<Nz;j++) {
            edep_per_event_rz[i][j] = 0.;
        }

    for(int i=0;i<Nz;i++)
        for(int j=0;j<Nr;j++) {
             vectorEnergy[i][j].clear();
             edep_per_event_xz[i][j] = 0.;
        }
    
    
}
